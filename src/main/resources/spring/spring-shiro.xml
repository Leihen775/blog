<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:util="http://www.springframework.org/schema/util"  
       xmlns:aop="http://www.springframework.org/schema/aop"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd  
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util.xsd  
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd">

	  <!--1. 配置 SecurityManager!-->     
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
      <property name="cacheManager" ref="cacheManager"/>
      <property name="authenticator" ref="authenticator"/>
      <property name="rememberMeManager" ref="rememberMeManager"/>
      <!--多realms配置-->
	    <property name="realms">
		    <list>
          <ref bean="jdbcRealm"/>
		    </list>
	    </property>
    </bean>
	  <!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	  <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
	    <property value="MD5" name="hashAlgorithmName"/>
	    <property name="hashIterations" value="1024"/>
	    <property name="storedCredentialsHexEncoded" value="true"/>
	  </bean>
    <!--  
    2. 配置 CacheManager. 
    2.1 需要加入 ehcache 的 jar 包及配置文件. 
    -->     
		<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:shiro/ehcache-shiro.xml"/> 
		</bean> 
		
		<!-- “记住我”配置 -->
		<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="sid"/>
	    <property name="httpOnly" value="true"/>
	    <property name="maxAge" value="-1"/>
		</bean>
		<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="rememberMe"/>
	    <property name="httpOnly" value="true"/>
	    <property name="maxAge" value="2592000"/><!-- 30天 -->
		</bean>
		<!-- rememberMe管理器 -->
		<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
	    <property name="cipherKey" value="\#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
	    <property name="cookie" ref="rememberMeCookie"/>
		</bean>
    
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
      <property name="authenticationStrategy">
        <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
      </property>
    </bean>

    <!--3. 配置 Realm-->     
    <bean id="jdbcRealm" class="blog.shiro.realm.UserRealm">
      <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>
    
    
    <!--  
    4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. 
    -->       
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--注解生效 -->     
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
      <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--  
    6. 配置 ShiroFilter. 
    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.
    -->     
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="loginUrl" value="/showLogin.action"/>
	    <property name="unauthorizedUrl" value="/admin/user/unauthorized"/>
       
	    <!-- 添加各种验证过滤器 -->  
	    <property name="filters">  
        <map>  
          <entry key="roleOrFilter" value-ref="roleOrFilter"/>  
        </map>  
	    </property>
       
      <!-- shiro连接约束配置,在这里使用自定义的动态获取资源类 -->  
      <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap" />  
  
      <!--  配置哪些页面需要受保护. 以及访问这些页面需要的权限. 
        1). anon 可以被匿名访问
        2). authc 必须认证(即登录)后才可能访问的页面. 
        3). logout 登出.
        4). roles 角色过滤器
      -->
      <property name="filterChainDefinitions">
        <value>
          /css/**= anon
          /image/** =anon
          /js/** =anon
          /static/**=anon
        </value>
      </property>
    </bean>
   
	  <!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 -->
	  <bean id="filterChainDefinitionMap" 
	     factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>
	  <bean id="filterChainDefinitionMapBuilder"
	    class="blog.shiro.factory.FilterChainDefinitionMapBuilder"></bean>
	   
	  <!-- 自定义的过滤器，用来判断当前用户是否是roleOrFilter["comm,test"]中的某个角色 -->  
	  <bean id="roleOrFilter" class="blog.shiro.filter.CustomRolesAuthorizationFilter" />  

	
</beans>